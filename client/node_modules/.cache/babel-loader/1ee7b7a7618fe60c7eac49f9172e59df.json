{"ast":null,"code":"import { SET_ALERT, REMOVE_ALERT } from \"../actions/types\";\nconst initialState = []; //ini\n\nexport default function (state = initialState, action) {\n  let nextState = [];\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case SET_ALERT:\n      return nextState = [...state, payload];\n\n    case REMOVE_ALERT:\n      return nextState = state.filter(alert => alert.id !== payload.id);\n\n    default:\n      return state;\n  }\n}\n/**\n * 1-on construit une fonction \n * qui retourne un objet\n * qui va être un bout du state de l'application\n * \n */\n\n/**\n * 2-Un reducer est donc une fonction qui\n *  modifie le state de votre application \n *  en fonction d'une action.\n */\n\n/**\n * 3-le state doit toujours rester immuable.\n * Si vous souhaitez modifier un objet immuable, \n * il faut créer une copie de cet objet (donc créer un nouvel objet) \n * et y appliquer vos modifications.\n * \n */","map":{"version":3,"sources":["/Users/Maranatha/Desktop/PROJECT_JS/MERN_SOCIAL_DEV_WORKER/client/src/reducers/alert.js"],"names":["SET_ALERT","REMOVE_ALERT","initialState","state","action","nextState","type","payload","filter","alert","id"],"mappings":"AAAA,SACIA,SADJ,EAEIC,YAFJ,QAEwB,kBAFxB;AAIA,MAAMC,YAAY,GAAG,EAArB,C,CAA0B;;AAE1B,eAAe,UAASC,KAAK,GAACD,YAAf,EAA8BE,MAA9B,EAAsC;AAEjD,MAAIC,SAAS,GAAE,EAAf;AAFiD,QAIzCC,IAJyC,GAIvBF,MAJuB,CAIzCE,IAJyC;AAAA,QAInCC,OAJmC,GAIvBH,MAJuB,CAInCG,OAJmC;;AAMjD,UAAOD,IAAP;AAEI,SAAKN,SAAL;AACI,aAAOK,SAAS,GAAG,CAAE,GAAGF,KAAL,EAAYI,OAAZ,CAAnB;;AAEJ,SAAKN,YAAL;AACI,aAAOI,SAAS,GAAGF,KAAK,CAACK,MAAN,CAAaC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaH,OAAO,CAACG,EAA3C,CAAnB;;AAEJ;AACI,aAAQP,KAAR;AATR;AAcH;AAGD;;;;;;;AAOC;;;;;;AAMC","sourcesContent":["import { \n    SET_ALERT,\n    REMOVE_ALERT } from \"../actions/types\";\n\nconst initialState = [];  //ini\n\nexport default function(state=initialState , action ){\n\n    let nextState= []\n\n    const { type, payload } = action ;\n\n    switch(type){\n\n        case SET_ALERT:\n            return nextState = [ ...state, payload ];\n        \n        case REMOVE_ALERT:\n            return nextState = state.filter(alert => alert.id !== payload.id )\n\n        default:\n            return  state;\n\n    }\n\n\n}\n\n\n/**\n * 1-on construit une fonction \n * qui retourne un objet\n * qui va être un bout du state de l'application\n * \n */\n\n /**\n  * 2-Un reducer est donc une fonction qui\n  *  modifie le state de votre application \n  *  en fonction d'une action.\n  */\n\n  /**\n   * 3-le state doit toujours rester immuable.\n   * Si vous souhaitez modifier un objet immuable, \n   * il faut créer une copie de cet objet (donc créer un nouvel objet) \n   * et y appliquer vos modifications.\n   * \n   */"]},"metadata":{},"sourceType":"module"}